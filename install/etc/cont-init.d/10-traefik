#!/usr/bin/with-contenv bash

for s in /assets/functions/*; do source $s; done
PROCESS_NAME="traefik"

if [ "$ENABLE_ZABBIX" = "TRUE" ]; then
    echo "* * * * * /etc/zabbix/zabbix_agentd.conf.d/scripts/traefik.sh > /dev/null 2&>1" >> /assets/cron/crontab.txt
fi

if [ "$ENABLE_LETSENCRYPT" = "TRUE" ]; then
	sanity_var LETSENCRYPT_EMAIL "Letsencrypt Email address"
    if [ "$LETSENCRYPT_CHALLENGE" = "DNS" ]; then
    	sanity_var LETSENCRYPT_DNS_PROVIDER "Letsencrypt DNS Provider"
    fi
fi

mkdir -p /traefik/config

if [ "$SETUP_TYPE" = "AUTO" ]; then
	 print_warn "Autogenerating Configuration File"
     ### Generate Config Template
     echo '# Custom Generated Traefik configuration file. Do not edit, instead set ENV Vars' > /traefik/config/${CONFIG_FILE}
     echo '# If you want to use your own config.toml file set SETUP_TYPE=MANUAL when starting container.' >> /traefik/config/${CONFIG_FILE}
     echo '# Last Generated on' `date` >> /traefik/config/${CONFIG_FILE}
     echo '' >> /traefik/config/${CONFIG_FILE}
     
     #### Check for new updates and Anonymous reporting
     if [ "$CHECK_NEW_VERSION" = "TRUE" ]; then
        echo '  checkNewVersion = true' >> /traefik/config/${CONFIG_FILE}
     else 
     	echo '  checkNewVersion = false' >> /traefik/config/${CONFIG_FILE}
     fi
     if [ "$SEND_ANONYMOUS_USAGE" = "TRUE" ]; then 
     	echo '  sendAnonymousUsage = true' >> /traefik/config/${CONFIG_FILE} 
     else 
     	echo '  sendAnonymousUsage = false' >> /traefik/config/${CONFIG_FILE}
     fi
     #### DEBUG Mode
	 if [ "$DEBUG_MODE" = "TRUE" ] || [ "$DEBUG_MODE" = "true" ]; then
        echo '  debug = true' >> /traefik/config/${CONFIG_FILE}
        TRAEFIK_LOG_LEVEL=DEBUG
	 fi
	 #### Log Level
     echo '  logLevel = "'${TRAEFIK_LOG_LEVEL}'"' >> /traefik/config/${CONFIG_FILE}

     #### Default Endpoints
	 if [ "$ENABLE_HTTP" = "TRUE" ]; then ENTRYPOINT_HTTP="\"http\""; fi;
     if [ "$ENABLE_HTTPS" = "TRUE" ]; then ENTRYPOINT_HTTPS="\"https\""; fi;
     if [ -n "$ENTRYPOINT_HTTP" ] && [ -n "$ENTRYPOINT_HTTPS" ] ; then ENTRYPOINTS_MULTIPLE=", "; fi;
     ENTRYPOINTS=${ENTRYPOINT_HTTP}${ENTRYPOINTS_MULTIPLE}${ENTRYPOINT_HTTPS}
     echo '  defaultEntryPoints = ['${ENTRYPOINTS}']' >> /traefik/config/${CONFIG_FILE}
     echo '' >> /traefik/config/${CONFIG_FILE}     	 

	 #### Entrypoints Setup
	 echo '[entryPoints]' >> /traefik/config/${CONFIG_FILE}

     #### Dashboard
     if [ "$ENABLE_DASHBOARD" = "TRUE" ]; then
     	echo '  [entryPoints.'$API_ENTRYPOINT']' >> /traefik/config/${CONFIG_FILE}
 	    echo '    address = "'$API_IP':'$API_LISTEN_PORT'"' >> /traefik/config/${CONFIG_FILE}
 	    echo '    compress = true' >>/traefik/config/${CONFIG_FILE}
	 	if [ "$ENABLE_DASHBOARD_AUTHENTICATION" = "TRUE" ]; then
		 	case "$DASHBOARD_AUTHENTICATION_TYPE" in
		        "BASIC")
	                DASHBOARD_ENCRYPTED=`htpasswd -nb ${DASHBOARD_ADMIN_USER} ${DASHBOARD_ADMIN_PASS}`
	    		 	echo '      [entryPoints.'$API_ENTRYPOINT'.auth.basic]' >> /traefik/config/${CONFIG_FILE}
	        	    echo '        users = ["'${DASHBOARD_ENCRYPTED}'"]' >> /traefik/config/${CONFIG_FILE}
		        ;;
		    esac
	 	fi
     fi

     #### HTTP / HTTPS Setup
	 if [ "$ENABLE_HTTP" = "TRUE" ]; then 
	 	echo '  [entryPoints.http]' >> /traefik/config/${CONFIG_FILE}
	 	echo '    address = "'${HTTP_LISTEN_IP}':'${HTTP_LISTEN_PORT}'"' >> /traefik/config/${CONFIG_FILE}
	 	if [ "$ENABLE_COMPRESSION_HTTP" = "TRUE" ]; then 
	 		echo '    compress = true' >> /traefik/config/${CONFIG_FILE}
	 	fi
     fi
     #### HTTP Proxy Protocol
     if [ "$ENABLE_HTTP_PROXY_PROTOCOL" = "TRUE" ]; then 
    	echo '      [entryPoints.http.proxyProtocol]' >> /traefik/config/${CONFIG_FILE}
        ips=$(echo $TRUSTED_IPS | tr "," "\n")
	    counter=1
	    for ip in $ips
	        do
	        if [ $counter != "1" ]; then
	    		TRUSTED_IPS_TMP=$TRUSTED_IPS_TMP', '
	    	fi
    		TRUSTED_IPS_TMP=$TRUSTED_IPS_TMP'"'${ip}'"'
    		counter=$((counter +1 ))
		done
		echo '         trustedIPs = ['$TRUSTED_IPS_TMP']' >> /traefik/config/${CONFIG_FILE}
		unset TRUSTED_IPS_TMP
     fi

     #### HTTPS Support
     if [ "$ENABLE_HTTPS" = "TRUE" ]; then 
        #### HTTPS Upgrade
     	if [ "$ENABLE_HTTPS_UPGRADE" = "TRUE" ]; then
     		echo '      [entryPoints.http.redirect]' >> /traefik/config/${CONFIG_FILE}
    		echo '        entryPoint = "https"' >> /traefik/config/${CONFIG_FILE}
    		echo '        permanent = true' >> /traefik/config/${CONFIG_FILE}

        fi
     	echo '  [entryPoints.https]' >> /traefik/config/${CONFIG_FILE}
        echo '    address = "'${HTTPS_LISTEN_IP}':'${HTTPS_LISTEN_PORT}'"' >> /traefik/config/${CONFIG_FILE}
		#### HTTPS Compression
		if [ "$ENABLE_COMPRESSION_HTTPS" = "TRUE" ]; then 
	 		echo '    compress = true' >> /traefik/config/${CONFIG_FILE}
	 	fi
        #### HTTPS Proxy Protocol
        if [ "$ENABLE_HTTPS_PROXY_PROTOCOL" = "TRUE" ]; then 
    	echo '      [entryPoints.https.proxyProtocol]' >> /traefik/config/${CONFIG_FILE}
        ips=$(echo $TRUSTED_IPS | tr "," "\n")
	    counter=1
	    for ip in $ips
	        do
	        if [ $counter != "1" ]; then
	    		TRUSTED_IPS_TMP=$TRUSTED_IPS_TMP', '
	    	fi
    		TRUSTED_IPS_TMP=$TRUSTED_IPS_TMP'"'${ip}'"'
    		counter=$((counter +1 ))
		done
		echo '         trustedIPs = ['$TRUSTED_IPS_TMP']' >> /traefik/config/${CONFIG_FILE}        
     fi

		echo '  [entryPoints.https.tls]' >> /traefik/config/${CONFIG_FILE}
		#### SNI Strict Checking
		if [ "$ENABLE_HTTPS_SNI_STRICT" = TRUE ]; then
			echo '     sniStrict = true' >> /traefik/config/${CONFIG_FILE}
		fi
		#### TLS Ciphers available
		ciphers=$(echo $TLS_CIPHERS | tr "," "\n")
        counter=1
        for cipher in $ciphers
            do
    		if [ $counter != "1" ]; then
    			TLS_CIPHERS_TMP=$TLS_CIPHERS_TMP', '
    	    fi

    		TLS_CIPHERS_TMP=$TLS_CIPHERS_TMP'"'${cipher}'"'
    		counter=$((counter +1 ))
		done
        echo '    CipherSuites = ['$TLS_CIPHERS_TMP']' >> /traefik/config/${CONFIG_FILE}
        #### TLS Minimum Version
        echo '    MinVersion = "'$TLS_MINIMUM_VERSION'"' >> /traefik/config/${CONFIG_FILE}
        echo '' >> /traefik/config/${CONFIG_FILE}

     echo '' >> /traefik/config/${CONFIG_FILE}
     	#### LetsEncrypt Support
     	if [ "$ENABLE_LETSENCRYPT" = "TRUE" ]; then
	     	mkdir -p /traefik/certs
	     	touch ${LETSENCRYPT_STORAGE}
	     	chmod 0600 ${LETSENCRYPT_STORAGE}
	     
	        #### Letsnecrypt required information
	        echo '[acme]' >> /traefik/config/${CONFIG_FILE}
	        echo '  email = "'${LETSENCRYPT_EMAIL}'"' >> /traefik/config/${CONFIG_FILE}
	        echo '  storage = "'${LETSENCRYPT_STORAGE}'"' >> /traefik/config/${CONFIG_FILE}
			echo '  entryPoint = "https"' >> /traefik/config/${CONFIG_FILE}
			#### Dyanmically Generate Certificates
			if [ "$LETSENCRYPT_ONHOST_GENERATE" = "TRUE" ]; then
	        	echo '  onHostRule = true' >> /traefik/config/${CONFIG_FILE}
	        else
	        	echo '  onHostRule = false' >> /traefik/config/${CONFIG_FILE}
	        fi
			if [ "$LETSENCRYPT_ONDEMAND_GENERATE" = "TRUE" ]; then
	        	echo '  onDemand = true' >> /traefik/config/${CONFIG_FILE}
	        else
	        	echo '  onDemand = false' >> /traefik/config/${CONFIG_FILE}
	        fi
	        #### Enable Debug Logging
	        if [ "$ENABLE_LETSENCRYPT_LOG" = "TRUE" ]; then
	        	echo '  acmeLogging = true' >> /traefik/config/${CONFIG_FILE}
	        fi
	        #### Which LetsEncrypt Server to use
	        if [ "$LETSENCRYPT_SERVER" = "STAGING" ]; then
	            echo '  caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"' >> /traefik/config/${CONFIG_FILE}
	        fi
	        #### Keysize
	        echo '  KeyType = "'${LETSENCRYPT_KEYTYPE}'"' >> /traefik/config/${CONFIG_FILE}
	        #### LetsEncrypt Challenges
	        case "$LETSENCRYPT_CHALLENGE" in
		        "TLS")
		        	echo '  [acme.tlsChallenge]' >> /traefik/config/${CONFIG_FILE}
		        ;;
		        "HTTP")
		        	echo '  [acme.httpChallenge]' >> /traefik/config/${CONFIG_FILE}
		        	echo '     entryPoint = "http"' >> /traefik/config/${CONFIG_FILE}
		        ;;
		        "DNS")
		        	echo '  [acme.dnsChallenge]' >> /traefik/config/${CONFIG_FILE}
				#### Add DNS Provider (Must use additional Environment Variables, See Traefik Doc
				    echo '    provider="'$LETSENCRYPT_DNS_PROVIDER'"' >>/traefik/config/${CONFIG_FILE}
			    #### Add DNS Resolvers if provided
			        if [ -n "$LETSENCRYPT_DNS_RESOLVER" ]; then
						resolvers=$(echo $LETSENCRYPT_DNS_RESOLVER | tr "," "\n")
				        counter=1
				        for ns in $resolvers
				            do
				    		if [ $counter != "1" ]; then
				    			LETSENCRYPT_DNS_RESOLVER_TMP=$LETSENCRYPT_DNS_RESOLVER_TMP', '
				    	    fi

				    		LETSENCRYPT_DNS_RESOLVER_TMP=$LETSENCRYPT_DNS_RESOLVER_TMP'"'${ns}'"'
				    		counter=$((counter +1 ))
						done
			        	echo '    resolvers = ['$LETSENCRYPT_DNS_RESOLVER_TMP']' >> /traefik/config/${CONFIG_FILE}
			        fi
			    #### Parse Multiple Domains for Wildcard Generation as well as Alternative Domains
		            NUM=`printenv | sort | grep '\LETSENCRYPT_DNS_DOMAIN.*' | wc -l`
				    for (( i = 1; i <= $NUM; i++ ))
	    				do
					        ACME_DOMAIN=LETSENCRYPT_DNS_DOMAIN${i}_MAIN
					        SANS_DOMAIN=LETSENCRYPT_DNS_DOMAIN${i}_SANS
					        
					        if [ "${!ACME_DOMAIN}" != "" ] ; then
					        	echo '  [[acme.domains]]' >> /traefik/config/${CONFIG_FILE}
					        	echo '     main = "'${!ACME_DOMAIN}'"' >> /traefik/config/${CONFIG_FILE}
					        	sans=$(echo ${!SANS_DOMAIN} | tr "," "\n")
				        		counter=1
				        		for domain in $sans
				            		do
						    		if [ $counter != "1" ]; then
						    			SANS_DOMAIN_TMP=$SANS_DOMAIN_TMP', '
						    	    fi

						    		SANS_DOMAIN_TMP=$SANS_DOMAIN_TMP'"'${domain}'"'
						    		counter=$((counter +1 ))
								done
					        	if [ -n "$SANS_DOMAIN_TMP" ]; then
					        		echo '     sans = ['${SANS_DOMAIN_TMP}']' >> /traefik/config/${CONFIG_FILE}
					            fi
					        	unset SANS_DOMAIN_TMP
	          				fi
	          			done
	          	## Revert back onHostRule if set
#	          		sed -i -e "s/onHostRule = true/onHostRule = false/g" /traefik/config/${CONFIG_FILE}
		        ;;
		        esac
	        echo '' >> /traefik/config/${CONFIG_FILE}
	     fi
	 fi    

     #### Traefik Logging
     echo '[traefikLog]' >> /traefik/config/${CONFIG_FILE}
     if [ $TRAEFIK_LOG_TYPE = "FILE" ]; then
        mkdir -p /traefik/logs
        echo '  filePath = "'${TRAEFIK_LOG_FILE}'"' >> /traefik/config/${CONFIG_FILE}
     fi
     echo '  format = "'${TRAEFIK_LOG_FORMAT}'"' >> /traefik/config/${CONFIG_FILE}
     echo '' >> /traefik/config/${CONFIG_FILE}
     #### Access Logs
     echo '[accessLog]' >> /traefik/config/${CONFIG_FILE}
     if [ $ACCESS_LOG_TYPE = "FILE" ]; then
        mkdir -p /traefik/logs
        echo '  filePath = "'${ACCESS_LOG_FILE}'"' >> /traefik/config/${CONFIG_FILE}
     fi
     echo '  format = "'${ACCESS_LOG_FORMAT}'"' >> /traefik/config/${CONFIG_FILE}
     if [ -n "$ACCESS_LOG_BUFFER_SIZE" ]; then
     	echo '  bufferingSize = '${ACCESS_LOG_BUFFER_SIZE} >> /traefik/config/${CONFIG_FILE}
     fi
     echo '' >> /traefik/config/${CONFIG_FILE}
     #### API and dashboard
     if [ $ENABLE_API = "TRUE" ]; then
     	echo '[api]' >> /traefik/config/${CONFIG_FILE}
        echo '  entryPoint = "'${API_ENTRYPOINT}'"' >> /traefik/config/${CONFIG_FILE}
	    if [ "$ENABLE_DASHBOARD" = "TRUE" ]; then 
	    	echo '  dashboard = true' >> /traefik/config/${CONFIG_FILE} 
	    else 
	    	echo '  dashboard = false' >> /traefik/config/${CONFIG_FILE}
	    fi
	 fi
     echo '' >> /traefik/config/${CONFIG_FILE}
     #### Ping Information
     if [ $ENABLE_PING = "TRUE" ]; then
     	echo '[ping]' >> /traefik/config/${CONFIG_FILE}
        echo '  entryPoint = "'${PING_ENTRYPOINT}'"' >> /traefik/config/${CONFIG_FILE}
	 fi
     echo '' >> /traefik/config/${CONFIG_FILE}
     #### REST Provider
     if [ $ENABLE_REST = "TRUE" ]; then
     	echo '[rest]' >> /traefik/config/${CONFIG_FILE}
        echo '  entryPoint = "'${REST_ENTRYPOINT}'"' >> /traefik/config/${CONFIG_FILE}
     fi
     #### Docker Information
	 if [ $ENABLE_DOCKER = "TRUE" ]; then
		echo '[docker]' >> /traefik/config/${CONFIG_FILE}
		echo '  endpoint = "'${DOCKER_ENDPOINT}'"' >> /traefik/config/${CONFIG_FILE}
		echo '  DefaultRule = '${DOCKER_DEFAULT_HOST_RULE} >> /traefik/config/${CONFIG_FILE}
		if [ $DOCKER_EXPOSE_CONTAINERS = "TRUE" ]; then
			echo '  exposedByDefault = true' >> /traefik/config/${CONFIG_FILE}
		else
			echo '  exposedByDefault = false' >> /traefik/config/${CONFIG_FILE}
		fi
		echo '  watch = true' >> /traefik/config/${CONFIG_FILE}
		if [ $ENABLE_DOCKER_SWARM_MODE = "TRUE" ]; then
			echo '  swarmMode = "true"' >> /traefik/config/${CONFIG_FILE}
			echo '  swarmModeRefreshSeconds = "'${DOCKER_SWARM_MODE_REFRESH}'"' >> /traefik/config/${CONFIG_FILE}
		fi
	 fi
else
	 print_warn "Manual Configuration Mode Activated"
	 if [ ! -f /traefik/config/${CONFIG_FILE} ]; then
	    print_notice "Traefik Configuration File found - Using.."
     fi
fi

liftoff
